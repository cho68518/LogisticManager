DELIMITER $$

DROP PROCEDURE IF EXISTS sp_MergePacking$$

CREATE PROCEDURE sp_MergePacking()
BEGIN
    /*--================================================================================
	-- 합포장 처리, 사방넷 원본 주문 데이터 기본변경 처리
    --================================================================================*/
    DECLARE v_sqlstate CHAR(5);
    DECLARE v_error_no INT;
    DECLARE v_error_message TEXT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
            v_sqlstate = RETURNED_SQLSTATE,
            v_error_no = MYSQL_ERRNO,
            v_error_message = MESSAGE_TEXT;

        ROLLBACK;

        DROP TEMPORARY TABLE IF EXISTS sp_execution_log;

        SELECT CONCAT(
            'Error (SQLSTATE: ', v_sqlstate, ', Error No: ', v_error_no, '): ', v_error_message, 
            ' | The transaction was rolled back.'
        ) AS ErrorMessage;
    END;

    CREATE TEMPORARY TABLE IF NOT EXISTS sp_execution_log (
		StepID INT AUTO_INCREMENT PRIMARY KEY,
		OperationDescription VARCHAR(255),
		AffectedRows INT
	);

    START TRANSACTION;

    TRUNCATE TABLE sp_execution_log;

    /*--================================================================================
	-- 1. 사방넷 원본 주문 데이터 기본변경 처리
    --================================================================================*/
    /*UPDATE 송장출력_사방넷원본변환
       SET 주소 = CONCAT(주소, '*')
     WHERE 품목코드 IN (7710, 7720);
	 
    UPDATE 송장출력_사방넷원본변환
       SET 송장명 = CONCAT('GC_', SUBSTRING(송장명, 4))
     WHERE LEFT(송장명, 3) = 'BS_';

    UPDATE 송장출력_사방넷원본변환
       SET 수취인명 = '난난'
     WHERE 수취인명 = 'nan';

    UPDATE 송장출력_사방넷원본변환
       SET 주소 = REPLACE(주소, '·', '')
     WHERE 주소 LIKE '%·%';

    UPDATE 송장출력_사방넷원본변환
       SET 결제수단 = '0'
     WHERE 쇼핑몰 = '배민상회';*/
	 
    UPDATE 송장출력_사방넷원본변환
    SET 
        -- 각 컬럼에 대한 변경 조건을 CASE 문으로 정의
        주소 = CASE
                 -- 1. 주소에 '·'가 포함된 경우, 먼저 모두 제거
                 WHEN 주소 LIKE '%·%' THEN 
                     CASE
                         -- 1-1. 품목코드 조건도 만족하면, '·' 제거 후 '*' 추가
                         WHEN 품목코드 IN ('7710', '7720') THEN CONCAT(REPLACE(주소, '·', ''), '*')
                         -- 1-2. 품목코드 조건은 만족하지 않으면, '·'만 제거
                         ELSE REPLACE(주소, '·', '')
                     END
                 -- 2. '·'는 없지만, 품목코드 조건만 만족하는 경우 '*' 추가
                 WHEN 품목코드 IN ('7710', '7720') THEN CONCAT(주소, '*')
                 -- 3. 아무 조건도 만족하지 않으면 원래 값 유지
                 ELSE 주소
             END,
        송장명 = CASE
                    WHEN LEFT(송장명, 3) = 'BS_' THEN CONCAT('GC_', SUBSTRING(송장명, 4))
                    ELSE 송장명
                END,
        수취인명 = CASE
                     WHEN 수취인명 = 'nan' THEN '난난'
                     ELSE 수취인명
                 END,
        결제수단 = CASE
                     WHEN 쇼핑몰 = '배민상회' THEN '0'
                     ELSE 결제수단
                 END
    WHERE
        품목코드 IN ('7710', '7720')
        OR LEFT(송장명, 3) = 'BS_'
        OR 수취인명 = 'nan'
        OR 주소 LIKE '%·%'
        OR 쇼핑몰 = '배민상회';
		

		
    /*--================================================================================
	-- 2. 합포장 처리
    --================================================================================*/
    -- 대체코드1이 있는 데이터 처리
    INSERT INTO 송장출력_사방넷원본변환 (
        msg1, msg2, msg3, msg4, msg5, msg6, 수취인명, 택배비용, 전화번호1, 전화번호2, 우편번호, 주소,
        수량, 배송메세지, 주문번호, 쇼핑몰, 수집시간, 송장명, 
        품목코드, 옵션명, 박스크기, 출력개수, 송장수량, 
        별표1, 별표2, 품목개수, 택배수량, 택배수량1, 택배수량합산,
        송장구분자, 송장구분, 송장구분최종, 위치, 위치변환, `주문번호(쇼핑몰)`, 결제금액, 주문금액, 
        결제수단, 면과세구분, 주문상태, 배송송
    )
    SELECT
        dev.msg1, dev.msg2, dev.msg3, dev.msg4, dev.msg5, dev.msg6, 
        dev.수취인명, dev.택배비용, dev.전화번호1, dev.전화번호2, dev.우편번호, dev.주소,
        (dev.수량 * CAST(spec.대체1수량 AS DECIMAL(10,2))) AS 수량, dev.배송메세지, dev.주문번호, dev.쇼핑몰, dev.수집시간, dev.송장명, 
        spec.대체코드1, spec.대체코드1품목명, 
        NULL, NULL, NULL,
        dev.별표1, dev.별표2, dev.품목개수, dev.택배수량, dev.택배수량1, dev.택배수량합산,
        dev.송장구분자, dev.송장구분, dev.송장구분최종, dev.위치, dev.위치변환, dev.`주문번호(쇼핑몰)`, dev.결제금액, dev.주문금액, 
        dev.결제수단, dev.면과세구분, dev.주문상태, dev.배송송
    FROM 송장출력_사방넷원본변환 dev
    JOIN 송장출력_특수출력_합포장변경 spec ON dev.품목코드 = spec.품목코드
    WHERE spec.대체코드1 IS NOT NULL AND spec.대체코드1 != '';
    
	INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[INSERT] (합포장 처리) 대체코드1 처리', ROW_COUNT());

    -- 대체코드2가 있는 데이터 처리
    INSERT INTO 송장출력_사방넷원본변환 (
        msg1, msg2, msg3, msg4, msg5, msg6, 수취인명, 택배비용, 전화번호1, 전화번호2, 우편번호, 주소,
        수량, 배송메세지, 주문번호, 쇼핑몰, 수집시간, 송장명, 
        품목코드, 옵션명, 박스크기, 출력개수, 송장수량, 
        별표1, 별표2, 품목개수, 택배수량, 택배수량1, 택배수량합산,
        송장구분자, 송장구분, 송장구분최종, 위치, 위치변환, `주문번호(쇼핑몰)`, 결제금액, 주문금액, 
        결제수단, 면과세구분, 주문상태, 배송송
    )
    SELECT
        dev.msg1, dev.msg2, dev.msg3, dev.msg4, dev.msg5, dev.msg6, 
        dev.수취인명, dev.택배비용, dev.전화번호1, dev.전화번호2, dev.우편번호, dev.주소,
        (dev.수량 * CAST(spec.대체2수량 AS DECIMAL(10,2))) AS 수량, dev.배송메세지, dev.주문번호, dev.쇼핑몰, dev.수집시간, dev.송장명, 
        spec.대체코드2, spec.대체코드2품목명, 
        NULL, NULL, NULL,
        dev.별표1, dev.별표2, dev.품목개수, dev.택배수량, dev.택배수량1, dev.택배수량합산,
        dev.송장구분자, dev.송장구분, dev.송장구분최종, dev.위치, dev.위치변환, dev.`주문번호(쇼핑몰)`, 0, 0,
        dev.결제수단, dev.면과세구분, dev.주문상태, dev.배송송
    FROM 송장출력_사방넷원본변환 dev
    JOIN 송장출력_특수출력_합포장변경 spec ON dev.품목코드 = spec.품목코드
    WHERE spec.대체코드2 IS NOT NULL AND spec.대체코드2 != '';
    
	INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[INSERT] (합포장 처리) 대체코드2 처리', ROW_COUNT());

    -- 대체코드3이 있는 데이터 처리
    INSERT INTO 송장출력_사방넷원본변환 (
        msg1, msg2, msg3, msg4, msg5, msg6, 수취인명, 택배비용, 전화번호1, 전화번호2, 우편번호, 주소,
        수량, 배송메세지, 주문번호, 쇼핑몰, 수집시간, 송장명, 
        품목코드, 옵션명, 박스크기, 출력개수, 송장수량, 
        별표1, 별표2, 품목개수, 택배수량, 택배수량1, 택배수량합산,
        송장구분자, 송장구분, 송장구분최종, 위치, 위치변환, `주문번호(쇼핑몰)`, 결제금액, 주문금액, 
        결제수단, 면과세구분, 주문상태, 배송송
    )
    SELECT
        dev.msg1, dev.msg2, dev.msg3, dev.msg4, dev.msg5, dev.msg6, 
        dev.수취인명, dev.택배비용, dev.전화번호1, dev.전화번호2, dev.우편번호, dev.주소,
        (dev.수량 * CAST(spec.대체3수량 AS DECIMAL(10,2))) AS 수량, dev.배송메세지, dev.주문번호, dev.쇼핑몰, dev.수집시간, dev.송장명, 
        spec.대체코드3, spec.대체코드3품목명,
        NULL, NULL, NULL,
        dev.별표1, dev.별표2, dev.품목개수, dev.택배수량, dev.택배수량1, dev.택배수량합산,
        dev.송장구분자, dev.송장구분, dev.송장구분최종, dev.위치, dev.위치변환, dev.`주문번호(쇼핑몰)`, 0, 0, 
        dev.결제수단, dev.면과세구분, dev.주문상태, dev.배송송
    FROM 송장출력_사방넷원본변환 dev
    JOIN 송장출력_특수출력_합포장변경 spec ON dev.품목코드 = spec.품목코드
    WHERE spec.대체코드3 IS NOT NULL AND spec.대체코드3 != '';
	
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[INSERT] (합포장 처리) 대체코드3 처리', ROW_COUNT());

    -- 대체코드4가 있는 데이터 처리
    INSERT INTO 송장출력_사방넷원본변환 (
        msg1, msg2, msg3, msg4, msg5, msg6, 수취인명, 택배비용, 전화번호1, 전화번호2, 우편번호, 주소,
        수량, 배송메세지, 주문번호, 쇼핑몰, 수집시간, 송장명, 
        품목코드, 옵션명, 박스크기, 출력개수, 송장수량, 
        별표1, 별표2, 품목개수, 택배수량, 택배수량1, 택배수량합산,
        송장구분자, 송장구분, 송장구분최종, 위치, 위치변환, `주문번호(쇼핑몰)`, 결제금액, 주문금액, 
        결제수단, 면과세구분, 주문상태, 배송송
    )
    SELECT
        dev.msg1, dev.msg2, dev.msg3, dev.msg4, dev.msg5, dev.msg6, 
        dev.수취인명, dev.택배비용, dev.전화번호1, dev.전화번호2, dev.우편번호, dev.주소,
        (dev.수량 * CAST(spec.대체4수량 AS DECIMAL(10,2))) AS 수량, dev.배송메세지, dev.주문번호, dev.쇼핑몰, dev.수집시간, dev.송장명, 
        spec.대체코드4, spec.대체코드4품목명,
        NULL, NULL, NULL,
        dev.별표1, dev.별표2, dev.품목개수, dev.택배수량, dev.택배수량1, dev.택배수량합산,
        dev.송장구분자, dev.송장구분, dev.송장구분최종, dev.위치, dev.위치변환, dev.`주문번호(쇼핑몰)`, 0, 0, 
        dev.결제수단, dev.면과세구분, dev.주문상태, dev.배송송
    FROM 송장출력_사방넷원본변환 dev
    JOIN 송장출력_특수출력_합포장변경 spec ON dev.품목코드 = spec.품목코드
    WHERE spec.대체코드4 IS NOT NULL AND spec.대체코드4 != '';
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[INSERT] (합포장 처리) 대체코드4 처리', ROW_COUNT());

    /*--================================================================================
	-- 합포장 해제 후 후속 처리
    --================================================================================*/
    -- 냉동 렉 위치 입력 (품목등록 테이블 기반)
    UPDATE 송장출력_사방넷원본변환 dev
	  JOIN 품목등록 p ON dev.품목코드 = p.품목코드 
	   SET dev.위치 = p.품목그룹2코드;
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[UPDATE] (합포장 처리) 품목 위치 정보 업데이트', ROW_COUNT());

    -- 택배 박스/낱개 구분
    UPDATE 송장출력_사방넷원본변환
	   SET 택배수량1 = CASE WHEN CAST(택배수량 AS UNSIGNED) = 1 THEN '박스' ELSE '낱개' END 
	 WHERE 택배수량 REGEXP '^[0-9]+$';
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[UPDATE] (합포장 처리) 택배 박스/낱개 구분', ROW_COUNT());

    -- 출력개수, 택배비용 등 기본값 설정
    UPDATE 송장출력_사방넷원본변환
       SET 택배비용 = IFNULL(택배비용, '2150'), 
           박스크기 = IFNULL(박스크기, '극소'), 
           출력개수 = IFNULL(출력개수, 1)
     WHERE 품목코드 IN (SELECT 대체코드1 FROM 송장출력_특수출력_합포장변경 WHERE 대체코드1 IS NOT NULL AND 대체코드1 != ''
                      UNION SELECT 대체코드2 FROM 송장출력_특수출력_합포장변경 WHERE 대체코드2 IS NOT NULL AND 대체코드2 != ''
                      UNION SELECT 대체코드3 FROM 송장출력_특수출력_합포장변경 WHERE 대체코드3 IS NOT NULL AND 대체코드3 != ''
                      UNION SELECT 대체코드4 FROM 송장출력_특수출력_합포장변경 WHERE 대체코드4 IS NOT NULL AND 대체코드4 != '');
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[UPDATE] (합포장 처리) 새로 추가된 품목 기본값 설정', ROW_COUNT());

    -- 원본 합포장 주문 데이터를 삭제
    DELETE FROM 송장출력_사방넷원본변환
    WHERE 품목코드 IN (SELECT 품목코드 FROM 송장출력_특수출력_합포장변경);
    INSERT INTO sp_execution_log (OperationDescription, AffectedRows) VALUES ('[DELETE] (합포장 처리) 원본 합포장 데이터(송장출력_사방넷원본변환) 삭제', ROW_COUNT());
    
    -- 작업 완료 후 커밋
    COMMIT;

    -- 최종 결과를 SELECT 문으로 반환
    SELECT StepID, OperationDescription, AffectedRows FROM sp_execution_log ORDER BY StepID;

    -- 프로시저 종료 전 임시 테이블 삭제
    DROP TEMPORARY TABLE IF EXISTS sp_execution_log;

END$$

DELIMITER ;
